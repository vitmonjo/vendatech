const request = require('supertest');
const app = require('../src/app');
const User = require('../src/models/User');

describe('游댏 Autentica칞칚o API', () => {
  describe('POST /api/auth/register', () => {
    it('deve registrar um novo usu치rio com dados v치lidos', async () => {
      const userData = {
        name: 'Jo칚o Silva',
        email: 'joao@test.com',
        password: '123456'
      };

      const response = await request(app)
        .post('/api/auth/register')
        .send(userData)
        .expect(201);

      expect(response.body.success).toBe(true);
      expect(response.body.message).toBe('Usu치rio registrado com sucesso');
      expect(response.body.data.user.name).toBe('Jo칚o Silva');
      expect(response.body.data.user.email).toBe('joao@test.com');
      expect(response.body.data.user.isAdmin).toBe(false);
      expect(response.body.data.token).toBeDefined();
    });

    it('deve retornar erro ao tentar registrar com email duplicado', async () => {
      // Criar primeiro usu치rio
      await User.create({
        name: 'Usu치rio Existente',
        email: 'existente@test.com',
        password: '123456'
      });

      const userData = {
        name: 'Novo Usu치rio',
        email: 'existente@test.com',
        password: '123456'
      };

      const response = await request(app)
        .post('/api/auth/register')
        .send(userData)
        .expect(400);

      expect(response.body.success).toBe(false);
      expect(response.body.message).toBe('Usu치rio j치 existe com este email');
    });

    it('deve retornar erro com dados inv치lidos', async () => {
      const userData = {
        name: 'A', // Nome muito curto
        email: 'email-invalido', // Email inv치lido
        password: '123' // Senha muito curta
      };

      const response = await request(app)
        .post('/api/auth/register')
        .send(userData)
        .expect(400);

      expect(response.body.success).toBe(false);
      expect(response.body.message).toBe('Dados inv치lidos');
      expect(response.body.errors).toBeDefined();
    });
  });

  describe('POST /api/auth/login', () => {
    beforeEach(async () => {
      // Criar usu치rio para teste
      await User.create({
        name: 'Usu치rio Teste',
        email: 'teste@test.com',
        password: '123456'
      });
    });

    it('deve fazer login com credenciais v치lidas', async () => {
      const loginData = {
        email: 'teste@test.com',
        password: '123456'
      };

      const response = await request(app)
        .post('/api/auth/login')
        .send(loginData)
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.message).toBe('Login realizado com sucesso');
      expect(response.body.data.user.email).toBe('teste@test.com');
      expect(response.body.data.token).toBeDefined();
    });

    it('deve retornar erro com credenciais inv치lidas', async () => {
      const loginData = {
        email: 'teste@test.com',
        password: 'senha-errada'
      };

      const response = await request(app)
        .post('/api/auth/login')
        .send(loginData)
        .expect(401);

      expect(response.body.success).toBe(false);
      expect(response.body.message).toBe('Email ou senha inv치lidos');
    });

    it('deve retornar erro com email inexistente', async () => {
      const loginData = {
        email: 'inexistente@test.com',
        password: '123456'
      };

      const response = await request(app)
        .post('/api/auth/login')
        .send(loginData)
        .expect(401);

      expect(response.body.success).toBe(false);
      expect(response.body.message).toBe('Email ou senha inv치lidos');
    });
  });

  describe('GET /api/auth/profile', () => {
    let authToken;

    beforeEach(async () => {
      // Criar usu치rio e obter token
      const user = await User.create({
        name: 'Usu치rio Teste',
        email: 'teste@test.com',
        password: '123456'
      });

      // Simular login para obter token
      const jwt = require('jsonwebtoken');
      authToken = jwt.sign({ id: user._id }, process.env.JWT_SECRET || 'test-secret');
    });

    it('deve retornar perfil do usu치rio autenticado', async () => {
      const response = await request(app)
        .get('/api/auth/profile')
        .set('Authorization', `Bearer ${authToken}`)
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.data.user.email).toBe('teste@test.com');
      expect(response.body.data.user.password).toBeUndefined(); // Senha n칚o deve aparecer
    });

    it('deve retornar erro sem token de autoriza칞칚o', async () => {
      const response = await request(app)
        .get('/api/auth/profile')
        .expect(401);

      expect(response.body.success).toBe(false);
      expect(response.body.message).toBe('Token de acesso necess치rio');
    });

    it('deve retornar erro com token inv치lido', async () => {
      const response = await request(app)
        .get('/api/auth/profile')
        .set('Authorization', 'Bearer token-invalido')
        .expect(401);

      expect(response.body.success).toBe(false);
      expect(response.body.message).toBe('Token inv치lido');
    });
  });
});
